# Generated by Django 5.2.3 on 2025-06-26 10:05

import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('devices', '0003_alter_device_device_type'),
        ('monitoring', '0002_speedtestresult_jitter_and_more'),
    ]

    operations = [
        migrations.CreateModel(
            name='PortMonitor',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('port', models.PositiveIntegerField(help_text='Port number to monitor')),
                ('service_type', models.CharField(choices=[('http', 'HTTP'), ('https', 'HTTPS'), ('ftp', 'FTP'), ('sftp', 'SFTP'), ('ssh', 'SSH'), ('telnet', 'Telnet'), ('smtp', 'SMTP'), ('pop3', 'POP3'), ('imap', 'IMAP'), ('dns', 'DNS'), ('dhcp', 'DHCP'), ('snmp', 'SNMP'), ('mysql', 'MySQL'), ('postgresql', 'PostgreSQL'), ('mssql', 'SQL Server'), ('oracle', 'Oracle'), ('mongodb', 'MongoDB'), ('redis', 'Redis'), ('custom', 'Custom')], default='custom', help_text='Type of service running on this port', max_length=20)),
                ('service_name', models.CharField(blank=True, help_text='Custom service name', max_length=100)),
                ('is_enabled', models.BooleanField(default=True, help_text='Enable monitoring for this port')),
                ('check_interval', models.PositiveIntegerField(default=300, help_text='Check interval in seconds')),
                ('timeout', models.PositiveIntegerField(default=10, help_text='Connection timeout in seconds')),
                ('alert_on_failure', models.BooleanField(default=True, help_text='Send alert when port is unreachable')),
                ('alert_threshold', models.PositiveIntegerField(default=3, help_text='Number of failures before alert')),
                ('is_reachable', models.BooleanField(default=True, help_text='Current reachability status')),
                ('last_check', models.DateTimeField(blank=True, help_text='Last check timestamp', null=True)),
                ('last_success', models.DateTimeField(blank=True, help_text='Last successful check', null=True)),
                ('consecutive_failures', models.PositiveIntegerField(default=0, help_text='Consecutive failure count')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('device', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='port_monitors', to='devices.device')),
            ],
            options={
                'verbose_name': 'Port Monitor',
                'verbose_name_plural': 'Port Monitors',
                'ordering': ['device', 'port'],
            },
        ),
        migrations.CreateModel(
            name='PortCheckResult',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_reachable', models.BooleanField(help_text='Whether the port was reachable')),
                ('response_time', models.FloatField(blank=True, help_text='Response time in milliseconds', null=True)),
                ('error_message', models.TextField(blank=True, help_text='Error message if check failed')),
                ('http_status_code', models.PositiveIntegerField(blank=True, help_text='HTTP status code', null=True)),
                ('http_response_size', models.PositiveIntegerField(blank=True, help_text='HTTP response size in bytes', null=True)),
                ('ssl_cert_expiry', models.DateTimeField(blank=True, help_text='SSL certificate expiry date', null=True)),
                ('timestamp', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('port_monitor', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='check_results', to='monitoring.portmonitor')),
            ],
            options={
                'verbose_name': 'Port Check Result',
                'verbose_name_plural': 'Port Check Results',
                'ordering': ['-timestamp'],
            },
        ),
        migrations.CreateModel(
            name='ServiceMonitor',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('service_name', models.CharField(help_text='Service name', max_length=100)),
                ('service_type', models.CharField(choices=[('http', 'HTTP'), ('https', 'HTTPS'), ('ftp', 'FTP'), ('sftp', 'SFTP'), ('ssh', 'SSH'), ('telnet', 'Telnet'), ('smtp', 'SMTP'), ('pop3', 'POP3'), ('imap', 'IMAP'), ('dns', 'DNS'), ('dhcp', 'DHCP'), ('snmp', 'SNMP'), ('mysql', 'MySQL'), ('postgresql', 'PostgreSQL'), ('mssql', 'SQL Server'), ('oracle', 'Oracle'), ('mongodb', 'MongoDB'), ('redis', 'Redis'), ('custom', 'Custom')], help_text='Type of service', max_length=20)),
                ('port', models.PositiveIntegerField(help_text='Service port')),
                ('protocol', models.CharField(choices=[('tcp', 'TCP'), ('udp', 'UDP')], default='tcp', max_length=10)),
                ('url_path', models.CharField(blank=True, help_text='URL path for HTTP checks', max_length=500)),
                ('expected_response', models.TextField(blank=True, help_text='Expected response content')),
                ('username', models.CharField(blank=True, help_text='Username for authentication', max_length=100)),
                ('password', models.CharField(blank=True, help_text='Password for authentication', max_length=100)),
                ('is_enabled', models.BooleanField(default=True)),
                ('check_interval', models.PositiveIntegerField(default=300, help_text='Check interval in seconds')),
                ('timeout', models.PositiveIntegerField(default=30, help_text='Check timeout in seconds')),
                ('is_healthy', models.BooleanField(default=True)),
                ('last_check', models.DateTimeField(blank=True, null=True)),
                ('last_success', models.DateTimeField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('device', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='service_monitors', to='devices.device')),
            ],
            options={
                'verbose_name': 'Service Monitor',
                'verbose_name_plural': 'Service Monitors',
                'ordering': ['device', 'service_name'],
            },
        ),
        migrations.CreateModel(
            name='ServiceCheckResult',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_healthy', models.BooleanField()),
                ('response_time', models.FloatField(blank=True, help_text='Response time in milliseconds', null=True)),
                ('status_message', models.TextField(blank=True)),
                ('error_details', models.TextField(blank=True)),
                ('metrics_data', models.JSONField(blank=True, default=dict, help_text='Service-specific metrics')),
                ('timestamp', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('service_monitor', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='check_results', to='monitoring.servicemonitor')),
            ],
            options={
                'verbose_name': 'Service Check Result',
                'verbose_name_plural': 'Service Check Results',
                'ordering': ['-timestamp'],
            },
        ),
        migrations.AddIndex(
            model_name='portmonitor',
            index=models.Index(fields=['device', 'port'], name='monitoring__device__95248b_idx'),
        ),
        migrations.AddIndex(
            model_name='portmonitor',
            index=models.Index(fields=['is_enabled', 'last_check'], name='monitoring__is_enab_fe8592_idx'),
        ),
        migrations.AddIndex(
            model_name='portmonitor',
            index=models.Index(fields=['service_type'], name='monitoring__service_c63561_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='portmonitor',
            unique_together={('device', 'port')},
        ),
        migrations.AddIndex(
            model_name='portcheckresult',
            index=models.Index(fields=['port_monitor', '-timestamp'], name='monitoring__port_mo_de6c1b_idx'),
        ),
        migrations.AddIndex(
            model_name='portcheckresult',
            index=models.Index(fields=['-timestamp'], name='monitoring__timesta_e5810e_idx'),
        ),
        migrations.AddIndex(
            model_name='portcheckresult',
            index=models.Index(fields=['is_reachable'], name='monitoring__is_reac_b189b4_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='servicemonitor',
            unique_together={('device', 'service_name')},
        ),
        migrations.AddIndex(
            model_name='servicecheckresult',
            index=models.Index(fields=['service_monitor', '-timestamp'], name='monitoring__service_b8cab1_idx'),
        ),
        migrations.AddIndex(
            model_name='servicecheckresult',
            index=models.Index(fields=['-timestamp'], name='monitoring__timesta_941044_idx'),
        ),
    ]
